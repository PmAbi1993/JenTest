   name: "Abhijith's iOS CI Runner ðŸ˜€"

   on:
     push:
       branches:
         - main
         - 'feature/**'
     pull_request:
       branches:
         - main
         - 'feature/**'

   jobs:
     build-and-test:
       runs-on: macos-15

       steps:
         - name: Checkout repository
           uses: actions/checkout@v4

         # Try to install a newer Xcode first; fall back if not available
         - name: Set up Xcode (try 16.2, fallback to 16.1)
           id: xcode
           run: |
             set -euo pipefail
             if gh api /repos/marketplace/actions/setup-xcode >/dev/null 2>&1; then :; fi
             echo "Attempting Xcode 16.2..."
             if gh --version >/dev/null 2>&1; then :; fi
           shell: bash
         - uses: maxim-lobanov/setup-xcode@v1
           with:
             xcode-version: '16.2'
           continue-on-error: true

         - name: Fallback to Xcode 16.1 if needed
           if: failure()
           uses: maxim-lobanov/setup-xcode@v1
           with:
             xcode-version: '16.1'

         - name: Show Xcode info
           run: |
             xcodebuild -version
             xcode-select -p
             xcodebuild -showsdks

         # List simulators (debugging)
         - name: List available simulators
           run: |
             xcrun simctl list -j || true

         # Pick and boot a simulator (same logic as before)
         - name: Select simulator
           id: pick-sim
           run: |
             set -euo pipefail
             SIM_JSON="$(xcrun simctl list -j devices available)"
             # Prefer iOS 18, then 17
             for os in 18 17; do
               for model in "iPhone 16 Pro" "iPhone 16" "iPhone 15 Pro" "iPhone 15" "iPhone 14"; do
                 if jq -e --arg model "$model" --arg os "^iOS ${os}" \
                   '[.devices|to_entries[]|select(.key|test($os))|.value[]|select(.isAvailable==true and .name==$model)]|length>0' \
                   <<<"$SIM_JSON" >/dev/null; then
                   CHOSEN_NAME="$model"
                   CHOSEN_OS=$(jq -r --arg os "^iOS ${os}" '.devices|to_entries[]|select(.key|test($os))|.key' <<<"$SIM_JSON" | head -n1)
                   echo "name=$CHOSEN_NAME" >> "$GITHUB_OUTPUT"
                   echo "os=$CHOSEN_OS" >> "$GITHUB_OUTPUT"
                   exit 0
                 fi
               done
             done
             # fallback to any
             CHOSEN_NAME=$(jq -r '.devices|to_entries[]|select(.key|test("^iOS "))|.value[]|select(.isAvailable==true)|.name' <<<"$SIM_JSON" | head -n1)
             CHOSEN_OS=$(jq -r '.devices|to_entries[]|select(.key|test("^iOS "))|.key' <<<"$SIM_JSON" | head -n1)
             if [ -z "$CHOSEN_NAME" ] || [ -z "$CHOSEN_OS" ]; then
               echo "No available iOS simulators." >&2
               exit 1
             fi
             echo "name=$CHOSEN_NAME" >> "$GITHUB_OUTPUT"
             echo "os=$CHOSEN_OS" >> "$GITHUB_OUTPUT"

         - name: Boot simulator
           run: |
             set -euo pipefail
             DEVICE_NAME="${{ steps.pick-sim.outputs.name }}"
             OS_LABEL="${{ steps.pick-sim.outputs.os }}"
             UDID=$(xcrun simctl list -j devices available | jq -r --arg name "$DEVICE_NAME" --arg os "$OS_LABEL" '.devices[$os][]|select(.name==$name and .isAvailable==true)|.udid' | head -n1)
             [ -n "$UDID" ] || { echo "No UDID found"; exit 1; }
             echo "UDID=$UDID" >> "$GITHUB_ENV"
             xcrun simctl boot "$UDID" || true
             xcrun simctl bootstatus "$UDID" -b

         - name: Build and test
           env:
             NSUnbufferedIO: "YES"
           run: |
             set -euo pipefail
             mkdir -p TestResults
             xcodebuild \
               -project JenTest.xcodeproj \
               -scheme JenTest \
               -sdk iphonesimulator \
               -destination "platform=iOS Simulator,id=${UDID}" \
               clean test \
               -resultBundlePath "TestResults/JenTest.xcresult" \
               -enableCodeCoverage YES

         - name: Upload Test Results
           if: always()
           uses: actions/upload-artifact@v4
           with:
             name: JenTest.xcresult
             path: TestResults/JenTest.xcresult
