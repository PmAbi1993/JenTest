name: "Abhijith's iOS CI Runner ðŸ˜€"

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main
      - 'feature/**'

jobs:
  build-and-test:
    name: Build and Run Unit Tests
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Xcode 16.1
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      - name: Show Xcode info
        run: |
          xcodebuild -version
          xcode-select -p
          xcodebuild -showsdks || true

      - name: List available simulators (debug)
        run: xcrun simctl list -j || true

      # Pick a concrete iOS Simulator: prefer iOS 18.*, then 17.*, and common iPhone models
      - name: Select iOS Simulator device
        id: pick-sim
        shell: bash
        run: |
          set -euo pipefail

          SIM_JSON="$(xcrun simctl list -j devices available)"
          if [ -z "$SIM_JSON" ]; then
            echo "No simctl output" >&2
            exit 1
          fi

          # Preferences
          PREFERRED_MODELS=("iPhone 16 Pro" "iPhone 16" "iPhone 15 Pro" "iPhone 15" "iPhone 14")
          PREFERRED_OSES=("18" "17")

          CHOSEN_NAME=""
          CHOSEN_OS_KEY=""

          choose_with_os_prefix() {
            local os_prefix="$1"
            for model in "${PREFERRED_MODELS[@]}"; do
              # any available device with name==model under an OS key starting with "iOS $os_prefix"
              if jq -e --arg model "$model" --arg os "^iOS ${os_prefix}" '
                [.devices | to_entries[]
                 | select(.key | test($os))
                 | .value[]
                 | select(.isAvailable == true and .name == $model)
                ] | length > 0' <<<"$SIM_JSON" >/dev/null; then
                CHOSEN_NAME="$model"
                CHOSEN_OS_KEY=$(jq -r --arg model "$model" --arg os "^iOS ${os_prefix}" '
                  .devices | to_entries[]
                  | select(.key | test($os))
                  | .key' <<<"$SIM_JSON" | head -n1)
                return 0
              fi
            done
            return 1
          }

          for os in "${PREFERRED_OSES[@]}"; do
            if choose_with_os_prefix "$os"; then
              break
            fi
          done

          if [ -z "$CHOSEN_NAME" ] || [ -z "$CHOSEN_OS_KEY" ]; then
            # fallback: any available iOS device
            CHOSEN_NAME=$(jq -r '
              .devices | to_entries[]
              | select(.key | test("^iOS "))
              | .value[]
              | select(.isAvailable == true)
              | .name' <<<"$SIM_JSON" | head -n1)
            CHOSEN_OS_KEY=$(jq -r '
              .devices | to_entries[]
              | select(.key | test("^iOS "))
              | .key' <<<"$SIM_JSON" | head -n1)
          fi

          if [ -z "$CHOSEN_NAME" ] || [ -z "$CHOSEN_OS_KEY" ]; then
            echo "No available iOS Simulator found." >&2
            exit 1
          fi

          echo "Chosen device: $CHOSEN_NAME on $CHOSEN_OS_KEY"
          echo "name=$CHOSEN_NAME" >> "$GITHUB_OUTPUT"
          echo "os_key=$CHOSEN_OS_KEY" >> "$GITHUB_OUTPUT"

      - name: Boot chosen simulator
        id: boot-sim
        shell: bash
        run: |
          set -euo pipefail
          DEVICE_NAME="${{ steps.pick-sim.outputs.name }}"
          OS_KEY="${{ steps.pick-sim.outputs.os_key }}"
          UDID=$(xcrun simctl list -j devices available | jq -r --arg name "$DEVICE_NAME" --arg os "$OS_KEY" '
            .devices[$os][] | select(.name == $name and .isAvailable == true) | .udid' | head -n1)
          if [ -z "$UDID" ] || [ "$UDID" = "null" ]; then
            echo "Could not resolve UDID for $DEVICE_NAME on $OS_KEY" >&2
            exit 1
          fi
          echo "UDID: $UDID"
          echo "udid=$UDID" >> "$GITHUB_OUTPUT"
          echo "UDID=$UDID" >> "$GITHUB_ENV"

          # Boot and wait until ready
          xcrun simctl boot "$UDID" || true
          xcrun simctl bootstatus "$UDID" -b

      - name: Verify project/schemes
        run: |
          xcodebuild -list -project JenTest.xcodeproj || true

      - name: Build and test
        env:
          NSUnbufferedIO: "YES"
        run: |
          set -euo pipefail
          mkdir -p TestResults
          RESULT_BUNDLE="TestResults/JenTest.xcresult"

          # If you actually use a workspace, swap -project for -workspace and set the correct scheme.
          xcodebuild \
            -project JenTest.xcodeproj \
            -scheme JenTest \
            -sdk iphonesimulator \
            -destination "platform=iOS Simulator,id=${UDID}" \
            clean test \
            -resultBundlePath "$RESULT_BUNDLE" \
            -enableCodeCoverage YES

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: JenTest.xcresult
          path: TestResults/JenTest.xcresult
          if-no-files-found: warn
